"""
Django settings for config project.

Generated by 'django-admin startproject' using Django 3.1.4.

For more information on this file, see
https://docs.djangoproject.com/en/3.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.1/ref/settings/
"""
import os
from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'bh79trs82++kyb4x%-x+7+78#^b)8+8x&b%9fien(mjz)&3k3m'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    # 끝에 'bookmark'를 추가한다.
    'bookmark',
    # 맨 끝에 ,(콤마)를 써 넣는 것도 잊지말자.
    # 빼놓더라도 오류는 나지 않지만 다른 앱을 추가할 때 빈번이 실수하는 부분이라서 습관처럼 콤마를 추가해두는 것이 좋다.
    # INSTALLED_APPS에 추가했다면 이제 데이터베이스 관련 명령이 정상적으로 동작할 것이다.
    # 터미널을 열고 python manage.py makemigrations bookmark를 입력하고 엔터를 치자.

    # 북마크 앱에서 데이터베이스 관련 변경사항이 있는지 확인하고 변경할 내용이 있다면 파일을 생성한다.
    # 이런 파일을 마이그레이션 파일이라고 한다.
    # 각 파일은 번호가 하나씩 증가하며 앱폴더에 있는 migrations 폴더에 순서대로 쌓인다.
    # 마이그레이션 파일의 내용을 실제 데이터베이스에 적용하기 위해 python manage.py migrate bookmark를 입력하고 엔터를 치자.
    # 모델과 연결된 데이터베이스가 생성됐다.
    # 이제 북마크를 추가, 확인, 수정, 삭제해야하는데 당장은 페이지를 만들지 않았기 때문에 관리자 페이지를 통해서 확인해야한다.
    # -> bookmark/admin.py로 이동
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'config.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        # 루트 폴더에 templates를 만들고 나면 여기에 설정을 추가해야한다.
        # 원래 'DIRS' 키는 비어있는 리스트이다.
        # 'DIRS'의 배열에 os.path.join(BASE_DIR, 'templates')를 추가한다.
        # 우리가 만든 폴더를 템플릿 검색할 때 살펴보라고 추가한 것이다.
        'DIRS': [ os.path.join(BASE_DIR, 'templates') ],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'config.wsgi.application'


# Database
# https://docs.djangoproject.com/en/3.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/3.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.1/howto/static-files/

STATIC_URL = '/static/'

# 정적(Static) 파일 사용하기
# 프로젝트 루트 폴더 내에 있는 static이라는 폴더를 사용한다는 코드
STATICFILES_DIRS = [os.path.join(BASE_DIR, 'static')]