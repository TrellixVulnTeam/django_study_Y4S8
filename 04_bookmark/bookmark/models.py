# 2. 모델 만들기
# 모델은 데이터베이스 사용을 쉽게 하기 위해 사용하는 도구이다.
# 웹 서비스를 만들면서 뭔가 데이터베이스에 저장하면서 사용해야겠다라는 데이터가 있다면 모델을 만든다고 생각하면 된다.

# 북마크 기능에는 북마크에 관한 정보를 데이터베이스에 저장해야한다.
# 모델을 작성해서 해당 자료를 데이터베이스에 저장할 수 있도록 하자.

# 모델 : 데이터베이스를 SQL없이 다루려고 모델을 사용
# 우리가 데이터를 객체화해서 다루겠다는 목적(이게 더 큰 목적이다.)
# 모델 = 데이터베이스 테이블
# 모델의 필드 = 테이블의 컬럼
# 인스턴스 = 테이블의 레코드
# 필드의 값(인스턴스의 필드값들) = 레코드의 컬럼 데이터값

# 내가 만약 어떤 정보를 데이터베이스에 저장해야겠다라는 것이 필요하면 모델을 만들면 된다.
# 잘 만드는 방법은 뒤에서 설명하겠다.

from django.db import models

# Create your models here.
# models.py에 models.Model을 상속받는 Bookmark 클래스를 만든다.
# 이것이 바로 모델의 기본이다.
# 모델 안에는 두 개의 클래스 변수가 있다. 앞으로 이것을 필드라고 부르겠다.
# 모델은 클래스로 만들어지기 때문에 첫 글자를 대문자로 만들어야한다.
class Bookmark(models.Model):
    # 모델에는 필드를 추가할 때 종류를 명시해줘야한다.
    # 데이터가 들어갈 수 있는 공간이 한정되있기 때문에 종류와 제한을 지정하는 것이 좋다.
    # 그래야 메모리와 용량을 아끼면서 데이터를 담을 수 있다.

    # site_name과 url이라는 두 개의 필드를 만드는데 데이터베이스의 이 두가지의 정보를 저장하려고 만들었다.
    # 그리고 이 정보가 기록되는 테이블의 이름은 bookmark이다.
    site_name = models.CharField(max_length=100) # 글자를 입력
    url = models.URLField('Site URL') # URLField로 만들면 장고 자체에서 링크 기능을 제공한다.
    # 안에 'Site URL'은 레이블을 지정해주는 것이다.
    # 필드의 종류가 결정하는 것
    # 1. 데이터베이스의 컬럼 종류
    # 2. 제약 사항(몇 글자까지 등등)
    # 3. Form의 종류를 결정
    # 4. Form에서의 제약 사항도 결정

    # 이 모델을 이용해 데이터베이스에 테이블을 생성하려면 두 가지의 명령어를 입력해야 한다.
    # 그리고 데이터베이스 관련 명령어가 제대로 동작하려면 settings.py에 bookmark 앱을 사용하기 위한 설정을 추가해야 한다.
    # -> settings.py에서 INSTALLED_APP 변수에 가서 고치자.

    # 모델에 __str__ 메서드 추가
    # 클래스 내부에 있는 메서드 중에서 _(언더바)가 앞뒤로 두 개씩 붙어있는 함수들을 매직 메서드 혹은 던더 메서드라고 부른다.
    # 특별한 기능들이 있는 메서드들인데 이번에 추가할 __str__ 메서드도 매직 메서드이다.
    # 이 메서드의 기능들은 클래스의 오브젝트를 출력할 때 나타날 내용을 결정하는 메서드이다.
    def __str__(self):
        # 객체를 출력할 때 나타날 값
        return "이름 : " + self.site_name + ", 주소 : " + self.url
        # __str__ 메서드는 항상 문자열을 반환해야한다.
        # 안에서 어떤 연산을 수행해도 상관은 없지만 반환하는 값은 항상 문자열이 되도록 구문을 만들어준다.
        # 코드를 변경했다면 관리자 페이지로 이동해 북마크 모델을 새로고침해보자.
        # 변경된 목록을 보면 __str__ 메서드에서 반환한 값이 출력되고 있는 것을 알 수 있다.
        # 이 메서드의 내용은 이후에 삭제 화면에서도 동일하게 나타난다.

# 모델을 만들었다 => 데이터베이스에 어떤 데이터들을 어떤 형태로 넣을지 결정했다는 말!
# 모델을 만들었으면
# makemigrations => 모델의 변경사항을 추적해서 기록하는 것
# 하고 나면 migrations 폴더에 0001_inital.py 파일이 생성된다.
# 마이그레이션(migration) 하기 => 데이터베이스에 모델의 내용을 반영(테이블 생성)
# 모델을 수정하고 나서도 migration을 해야한다.

# 목록 뷰 만들기 -> views.py로

