"""
Django settings for config project.

Generated by 'django-admin startproject' using Django 3.1.4.

For more information on this file, see
https://docs.djangoproject.com/en/3.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.1/ref/settings/
"""
import os
from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = '8teomj0dyl1z8sxdosn)jz+^9!bk=5l-92yt0v^e7ruqvkw%^v'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    # 앱을 만들고 나면 바로 settings.py 파일 안에 INSTALLED_APPS에 'photo',를 추가한다.
    # 밑의 MIDDLEWARE에 실수로 추가하는 사람들도 있다.
    # 'photo' 대신 늘려서 쓴 'photo.apps.PhotoConfig', 로 쓸 수도 있다.
    # apps.py에서 확인 가능한 이름이다.
    # 이렇게 늘려서 쓰는 것은 시그널을 다룰 때 해보자. 지금은 불필요하다.
    'photo',
    # accounts 앱을 추가한다.
    'accounts',
    # accounts/urls.py로 이동

    # 5.5 댓글 기능 구현하기
    # 댓글은 웹 서비스에서 기본으로 갖추어야 하는 기능 중에 하나가 되었다.
    # 이번 절에서는 디스타그램 서비스에 댓글 기능을 구현해보겠다.
    # 하지만 장고에 코드를 만들어서 댓글을 구현하는 것은 JavaScript를 많이 다뤄야 하는 부분이다.
    # 이 책의 범위를 넘어서는 부분이기 때문에 기존에 구현되어 있는 댓글 앱을 다운로드 받아서 적용해 보도록 하자.
    # 5.5.1 DISQUS 가입하기
    # 댓글 시스템을 직접 만들지 않고 DISQUS라는 온라인 소셜 댓글 시스템을 빌려서 사용해보자.
    # 이 시스템을 사용하려면 사이트에 가입해야한다.
    # 가입하고 설정완료했다.
    # pip install django-disqus로 앱을 설치한다.
    # 설치한 앱도 우리가 만든 앱과 마찬가지로 settings.py에 등록해줘야한다.
    'disqus',
    'django.contrib.sites',
    # disqus와 django.contrib.sites 두 개를 추가한다.
    # sites는 장고에서 사용하는 사이트 관리 프레임워크이다.
    # 멀티사이트 구성이나 개별 사이트의 도메인 관리 등을 담당한다.
    # disqus 앱을 사용하려면 필요하기 때문에 같이 등록해줬다.
    # six 모듈 관련 오류가 뜬다. 검색하면 찾아서 고칠 수 있다.
    # python manage.py migrate 명령을 실행해 sites 앱을 위한 데이터베이스를 설정한다.
    # 이제 disqus 사용을 위한 설정값을 추가하자.
    # settings.py 맨 밑에 두 개의 변수를 추가한다.
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'config.urls'

# TEMPLATES 변수에 있는 DIRS 키의 값에 os.path.join(BASE_DIR, 'templates') 추가한다.
TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        # base.html이 검색될테니 나머지 템플릿들도 만들자.
        # photo/templates/photo/list.html로 이동
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'config.wsgi.application'


# Database
# https://docs.djangoproject.com/en/3.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/3.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.1/howto/static-files/

STATIC_URL = '/static/'

# 5.3.4 업로드 폴더 관리
# 각 앱에서 업로드 하는 파일들을 한 폴더를 중심으로 모으려면 settings.py에 MEDIA_ROOT라는 옵션을 설정해야 한다.
# MEDIA_ROOT의 값을 프로젝트 루트 밑에 media 폴더로 설정한다.
# 그러면 어떤 앱에서 업로드를 하더라도 media 폴더 밑에 각 앱 별로 폴더를 만들고 파일을 업로드 하게 된다.
# MEDIA_URL은 STATIC_URL처럼 파일을 브라우저로 서빙할 때 보여줄 가상의 URL이다.
# 가상 URL은 여러가지 편의도 있지만 보안을 위해 필요한 기능이다.
# 이 가상 URL을 사용하면 서버 내부의 폴더 구조를 숨길 수 있기 때문에 해커에게 정보를 적게 노출할 수 있다.
MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')
# MEDIA_ROOT를 설정했으니 파일을 한 번 더 올려보도록 하자.
# 관리자 페이지로 가서 기존에 업로드한 사진을 수정한다.
# 똑같은 파일을 다시 선택하고 [SAVE] 버튼을 누른다.
# 그리고 파이참에 와서 폴더 경로를 확인해보면 media 폴더 아래에 다시 photos 폴더가 생긴 것을 확인할 수 있다.
# 기존에 있던 프로젝트 루트의 photos 폴더는 제거한다.

# admin.py로 이동해서 5.3.5 관리자 페이지 커스터마이징보기

# settings.py에 LOGIN_REDIRECT_URL 변수를 추가한다.
LOGIN_REDIRECT_URL = '/'
# LOGIN_REDIRECT_URL은 로그인 후 이동할 페이지 옵션이다.
# 이 변수의 값을 '/'로 설정하면 로그인 후에 메인 페이지로 이동한다.

# disqus 사용을 위한 변수 2개
# DISQUS_WEBSITE_SHORTNAME 변수는 disqus에 설정해둔 이름을 써야한다.
# 혹시 생각이 안나면 disqus 사이트로 가서 확인해보면 된다.
DISQUS_WEBSITE_SHORTNAME = 'brightnightsky-dstagram'
# SITE_ID 변수는 sites 앱에 등록된 현재 사이트의 번호이다.
# 기본적으로는 1번이다.
SITE_ID = 1
# 설정은 끝났다. 이제 템플릿에 댓글 시스템이 출력되도록 수정만 하면 된다.
# 댓글 시스템은 각 사진의 상세 페이지에서 보여주도록 하자.
# detail.html로 이동
