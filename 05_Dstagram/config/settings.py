"""
Django settings for config project.

Generated by 'django-admin startproject' using Django 3.1.4.

For more information on this file, see
https://docs.djangoproject.com/en/3.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.1/ref/settings/
"""
import os
from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = '8teomj0dyl1z8sxdosn)jz+^9!bk=5l-92yt0v^e7ruqvkw%^v'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    # 앱을 만들고 나면 바로 settings.py 파일 안에 INSTALLED_APPS에 'photo',를 추가한다.
    # 밑의 MIDDLEWARE에 실수로 추가하는 사람들도 있다.
    # 'photo' 대신 늘려서 쓴 'photo.apps.PhotoConfig', 로 쓸 수도 있다.
    # apps.py에서 확인 가능한 이름이다.
    # 이렇게 늘려서 쓰는 것은 시그널을 다룰 때 해보자. 지금은 불필요하다.
    'photo',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'config.urls'

# TEMPLATES 변수에 있는 DIRS 키의 값에 os.path.join(BASE_DIR, 'templates') 추가한다.
TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        # base.html이 검색될테니 나머지 템플릿들도 만들자.
        # photo/templates/photo/list.html로 이동
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'config.wsgi.application'


# Database
# https://docs.djangoproject.com/en/3.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/3.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.1/howto/static-files/

STATIC_URL = '/static/'

# 5.3.4 업로드 폴더 관리
# 각 앱에서 업로드 하는 파일들을 한 폴더를 중심으로 모으려면 settings.py에 MEDIA_ROOT라는 옵션을 설정해야 한다.
# MEDIA_ROOT의 값을 프로젝트 루트 밑에 media 폴더로 설정한다.
# 그러면 어떤 앱에서 업로드를 하더라도 media 폴더 밑에 각 앱 별로 폴더를 만들고 파일을 업로드 하게 된다.
# MEDIA_URL은 STATIC_URL처럼 파일을 브라우저로 서빙할 때 보여줄 가상의 URL이다.
# 가상 URL은 여러가지 편의도 있지만 보안을 위해 필요한 기능이다.
# 이 가상 URL을 사용하면 서버 내부의 폴더 구조를 숨길 수 있기 때문에 해커에게 정보를 적게 노출할 수 있다.
MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')
# MEDIA_ROOT를 설정했으니 파일을 한 번 더 올려보도록 하자.
# 관리자 페이지로 가서 기존에 업로드한 사진을 수정한다.
# 똑같은 파일을 다시 선택하고 [SAVE] 버튼을 누른다.
# 그리고 파이참에 와서 폴더 경로를 확인해보면 media 폴더 아래에 다시 photos 폴더가 생긴 것을 확인할 수 있다.
# 기존에 있던 프로젝트 루트의 photos 폴더는 제거한다.

# admin.py로 이동해서 5.3.5 관리자 페이지 커스터마이징보기
